name: Deploy Golang App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-1
  EC2_HOST: ${{ secrets.EC2_HOST }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          cd app
          go mod download

      - name: Run tests
        run: |
          cd app
          go test -v ./...

  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build
        run: |
          cd app
          GOOS=linux GOARCH=amd64 go build -o app

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Deploy to EC2
        run: |
          # Create Nginx config
          cat > nginx.conf << 'EOF'
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://localhost:8080;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF

          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          cd /app
          # Stop existing process if running
          pkill app || true
          # Copy new binary
          mv app.new app
          # Start application
          nohup ./app &
          EOF

          # Setup directory and permissions first
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "sudo mkdir -p /app && sudo chown ec2-user:ec2-user /app"

          # Copy files
          scp -o StrictHostKeyChecking=no app/app ec2-user@${{ secrets.EC2_HOST }}:/app/app.new
          scp -o StrictHostKeyChecking=no deploy.sh ec2-user@${{ secrets.EC2_HOST }}:/app/deploy.sh
          scp -o StrictHostKeyChecking=no nginx.conf ec2-user@${{ secrets.EC2_HOST }}:/tmp/nginx.conf
          
          # Configure Nginx and deploy app
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "sudo mv /tmp/nginx.conf /etc/nginx/conf.d/app.conf && sudo systemctl restart nginx && chmod +x /app/deploy.sh && /app/deploy.sh" 
